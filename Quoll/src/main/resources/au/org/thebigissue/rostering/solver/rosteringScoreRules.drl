package au.org.thebigissue.rostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import au.org.thebigissue.rostering.solver.entities.Shift;
import au.org.thebigissue.rostering.solver.entities.FacilitatorShift;
import au.org.thebigissue.rostering.solver.entities.GuestSpeakerShift;
import au.org.thebigissue.rostering.solver.solution.Roster;
import au.org.thebigissue.rostering.solver.entities.Workshop;
import au.org.thebigissue.rostering.solver.variables.GuestSpeaker;
//import au.org.thebigissue.rostering.solver.variables.DummyGuest;
import au.org.thebigissue.rostering.input.RosteringImporter;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// A facilitator can only run one workshop at a time
rule "Facilitator double-booked"
    when
        $leftWorkshop : Workshop($leftId : id, $leftFacilitator : facilitatorShift)
        Workshop(id > $leftId, facilitatorShift == $leftFacilitator, hasOverlap($leftWorkshop))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// A guest speaker can only attend one workshop at a time
rule "Guest speaker double-booked"
    when
        $leftWorkshop : Workshop($leftId : id, $leftGuestSpeaker : guestSpeakerShift)
        Workshop(id > $leftId, guestSpeakerShift == $leftGuestSpeaker, hasOverlap($leftWorkshop))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


// A facilitator can only run workshops within their availability
rule "Facilitator is unavailable"
    when
        $workshop : Workshop($facilitatorShift : facilitatorShift)
        FacilitatorShift(this == $facilitatorShift, staff.isUnavailable($workshop))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// A guest speaker can only attend workshops within their availability
rule "Guest speaker is unavailable"
    when
        $workshop : Workshop($guestSpeakerShift : guestSpeakerShift)
        GuestSpeakerShift(this == $guestSpeakerShift, staff.isUnavailable($workshop))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Facilitator can only be allocated to Workshops they are trained for
rule "Facilitator is not trained for course"
    when
        Workshop($courseName : course, $facilitatorShift : facilitatorShift)
        FacilitatorShift(this == $facilitatorShift, !(staff.isTrained($courseName)))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Guest Speaker can only be allocated to Workshops they are trained for
rule "Guest Speaker is not trained for course"
    when
        Workshop($courseName : course, $guestSpeakerShift : guestSpeakerShift)
        GuestSpeakerShift(this == $guestSpeakerShift, !(staff.isTrained($courseName)))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/*
// Certain Courses do not need a guest speaker
rule "Guest speaker assigned to course that does not need a guest speaker"
    when
        Workshop($courseName : course, $guestSpeakerShift : guestSpeakerShift, facilitatorOnly == true)
        GuestSpeakerShift(this == $guestSpeakerShift, !(staff.isDummy()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/
/*
rule "Guest speaker required, but not assigned"
    when
        Workshop($courseName : course, $guestSpeakerShift : guestSpeakerShift, facilitatorOnly == false)
        GuestSpeakerShift(this == $guestSpeakerShift, staff.isDummy())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
*/

// Do not roster staff back-to-back if different location - facilitators
rule "Back-to-back workshops with different location (Facilitator)"
    when
        $workshop1 : Workshop($workshop1EndTime : endDateTime, $location : location, $shift : facilitatorShift)

        // check that workshop 2 has same facilitator, different location and starts within 30 min after the end of workshop 1
        $workshop2 : Workshop($shift == facilitatorShift, !($location.equals(location)), $workshop2EndTime : endDateTime, !($workshop1EndTime.isAfter(startDateTime)), $workshop1EndTime.plusMinutes(30).isAfter(startDateTime))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Do not roster staff back-to-back if different location - guest speakers
rule "Back-to-back workshops with different location (Guest Speaker)"
    when
        $workshop1 : Workshop($workshop1EndTime : endDateTime, $location : location, $shift : guestSpeakerShift)

        // check that workshop 2 has same facilitator, different location and starts within 30 min after the end of workshop 1
        $workshop2 : Workshop($shift == guestSpeakerShift, !($location.equals(location)), $workshop2EndTime : endDateTime, !($workshop1EndTime.isAfter(startDateTime)), $workshop1EndTime.plusMinutes(30).isAfter(startDateTime))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Do not roster staff on a second workshop within 120 minutes in another location if first location is offsite - facilitators
rule "Back-to-back workshops - offsite location (facilitators)"
    when
        $workshop1 : Workshop($workshop1EndTime : endDateTime, $location : location, $location.equals("Other"), $offsite : offsite, $shift : facilitatorShift)

        // check that workshop 2 has same facilitator, different location and starts within 120 min after the end of workshop 1
        $workshop2 : Workshop($shift == facilitatorShift, !$location.equals(location) || !$offsite.equals(offsite), $workshop2EndTime : endDateTime, !($workshop1EndTime.isAfter(startDateTime)), $workshop1EndTime.plusMinutes(120).isAfter(startDateTime))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Do not roster staff on a second workshop within 120 minutes in another location if first location is offsite - guest speakers
rule "Back-to-back workshops - offsite locations (guest speakers)"
    when
        $workshop1 : Workshop($workshop1EndTime : endDateTime, location.equals("Other"), $offsite : offsite, $shift : guestSpeakerShift)

        // check that workshop 2 has same facilitator, differection location and starts within 120 min after the end of workshop 1
        $workshop2 : Workshop($shift == guestSpeakerShift, !$offsite.equals(offsite), $workshop2EndTime : endDateTime, !($workshop1EndTime.isAfter(startDateTime)), $workshop1EndTime.plusMinutes(120).isAfter(startDateTime))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// A facilitator can attend a maximum of 3 workshops per day
rule "Facilitator: max 3 workshops per day"
    when
        FacilitatorShift($num : getNumWorkshops() > 3)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -(2 ^ ($num - 3)) * 100);
end

// A guest speaker can only attend a maximum of 3 workshops per day
rule "Guest speaker: max 3 workshops per day"
    when
        GuestSpeakerShift($num : getNumWorkshops() > 3)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -(2 ^ ($num - 3)) * 200);
end

// A facilitator can attend a maximum of $maxSession workshops per week
rule "Facilitator: max $maxSession(defineded in the Execl file) workshops per week"
    when
        //FacilitatorShift($num : getNumWorkshops() > $maxSessions : maxSessions)
        FacilitatorShift($num : getNumWorkshopsPerWeek() > $maxSessions : maxSessions)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -(2 ^ ($num - $maxSessions)) * 100);
end

// A guest speaker can only attend a maximum of $maxSession workshops per week
rule "Guest speaker: max $maxSession(defineded in the Execl file) workshops per week"
    when
        GuestSpeakerShift($num : getNumWorkshopsPerWeek() > $maxSessions : maxSessions)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -(2 ^ ($num - $maxSessions)) * 200);
end

// ############################################################################
// Soft constraints
// ############################################################################


/* Moved to hard constraint
// A facilitator can attend a maximum of $maxSession workshops per day
rule "Facilitator: max $maxSession(defineded in the Execl file) workshops per day"
    when
        FacilitatorShift($num : getNumWorkshops() > $maxSessions : maxSessions)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -(2 ^ ($num - $maxSessions)) * 100);
end

// A guest speaker can only attend a maximum of $maxSession workshops per day
rule "Guest speaker: max $maxSession(defineded in the Execl file) workshops per day"
    when
        GuestSpeakerShift($num : getNumWorkshops() > $maxSessions : maxSessions)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -(2 ^ ($num - $maxSessions)) * 200);
end
*/

// Maximise the utilisation of staff (time spent in workshops / total shift time)
rule "Maximise utilisation - facilitator"
    when
        $workshop : Workshop($facilitatorShift : facilitatorShift)
        FacilitatorShift(this == $facilitatorShift, $utilisation : getUtilisation())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $utilisation);
end

rule "Maximise utilisation - guest speaker"
    when
        $workshop : Workshop($guestSpeakerShift : guestSpeakerShift)
        GuestSpeakerShift(this == $guestSpeakerShift, $utilisation : getUtilisation())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $utilisation);
end

/*
// Prefer rostering less reliable guest speakers on workshops occurring after more reliable guest speakers
rule "Guest speaker ordering by reliability"
    when
        $workshop1 : Workshop($workshop1EndTime : endDateTime, $guestSpeakerShift1 : guestSpeakerShift)
        GuestSpeakerShift(this == $guestSpeakerShift1, $reliability1 : staff.getReliability())

        // check that workshop 2 starts within 2.5 hours after the end of workshop 1
        $workshop2 : Workshop(!($workshop1EndTime.isAfter(startDateTime)), $workshop1EndTime.plusMinutes(150).isAfter(startDateTime), $guestSpeakerShift2 : guestSpeakerShift)
        GuestSpeakerShift(this == $guestSpeakerShift2, $reliability2 : staff.getReliability())

    then
        // The score aims to reward higher reliability, but reduces the penalty of a lower reliability guest speaker
        // when they are preceded by a higher reliability guest speaker.
        scoreHolder.addSoftConstraintMatch(kcontext, (($reliability1 + $reliability2) * 4 + Math.min(0,($reliability1 - $reliability2) * 3)));
end
*/

rule "Max 3 workshops in a row without break"
    when
        $workshop1 : Workshop($workshop1EndTime : endDateTime, $shift : facilitatorShift)

        // check that workshop 2 has same facilitator and starts within 30 min after the end of workshop 1
        $workshop2 : Workshop($shift == facilitatorShift, $workshop2EndTime : endDateTime, !($workshop1EndTime.isAfter(startDateTime)), $workshop1EndTime.plusMinutes(30).isAfter(startDateTime))

        // check workshop 3
        $workshop3 : Workshop($shift == facilitatorShift, $workshop3EndTime : endDateTime, !($workshop2EndTime.isAfter(startDateTime)), $workshop2EndTime.plusMinutes(30).isAfter(startDateTime))

        // check workshop 4
        $workshop4 : Workshop($shift == facilitatorShift, !($workshop3EndTime.isAfter(startDateTime)), $workshop3EndTime.plusMinutes(30).isAfter(startDateTime))

    then
        scoreHolder.addSoftConstraintMatch(kcontext, -200);
end


rule "Facilitator - avoid single-workshop shifts, unless office staff"
    when
        $workshop : Workshop($facilitatorShift : facilitatorShift)
        FacilitatorShift(this == $facilitatorShift, getNumWorkshops() == 1, !staff.isOfficeStaff())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1); // changed to -1. if too big it creates a score trap.
end


rule "Allocate office staff only when really necessary"
    when
        $workshop : Workshop($facilitatorShift : facilitatorShift)
        FacilitatorShift(this == $facilitatorShift, staff.isOfficeStaff())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -100);
end


/* REMOVED, as the ValueRangeProvider in Workshop.java should now only provide shifts on the same date; more efficient

// ############################################################################
// Value range limitations
// ############################################################################


// Workshops can only be allocated to facilitator shifts on the same date
rule "FacilitatorShift date mismatch"
    when
        Workshop($facilitatorShift : facilitatorShift, $workshopDate : date)
        FacilitatorShift(this == $facilitatorShift, $shiftDate : date, !$workshopDate.equals($shiftDate))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// Workshops can only be allocated to guest speaker shifts on the same date
rule "GuestSpeakerShift date mismatch"
    when
        Workshop($guestSpeakerShift : guestSpeakerShift, $workshopDate : date)
        GuestSpeakerShift(this == $guestSpeakerShift, $shiftDate : date, !$workshopDate.equals($shiftDate))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end*/
